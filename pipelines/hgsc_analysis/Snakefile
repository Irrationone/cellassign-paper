configfile: "config/v1.yaml"

singularity: "docker://alzhang/scrna-analysis-follicular-3.5:v1.5"

rule all:
    input:
        #hgsc_cellassign_annotated='{workdir}/sce_hgsc_celltype_annotated.rds'.format(workdir=config['workdir']),
        #'{outdir}/cyclone/cc_result.rds'.format(outdir=config['outdir']),
        hgsc_annotated='{outdir}/sce_hgsc_annotated_final.rds'.format(outdir=config['outdir']),


# Create SingleCellExperiment
rule create_hgsc_sce:
    input:
        filtered_matrices=[config['hgsc_data'][x]['filtered_matrix_path'] for x in config['hgsc_data']],
    output:
        '{workdir}/sce_hgsc.rds'.format(workdir=config['workdir'])
    params:
        name='create-hgsc-sce',
        sample_names=[config['hgsc_data'][x]['dataset'] for x in config['hgsc_data']],
        timepoints=[config['hgsc_data'][x]['timepoint'] for x in config['hgsc_data']],
        sites=[config['hgsc_data'][x]['site'] for x in config['hgsc_data']],
        patients=[config['hgsc_data'][x]['patient'] for x in config['hgsc_data']],
    log:
        '{logdir}/logs/create_hgsc_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/create_hgsc_sce.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/create_sce.R '
        '--sample_names {params.sample_names} '
        '--filtered_matrices {input.filtered_matrices} '
        '--timepoints {params.timepoints} '
        '--sites {params.sites} '
        '--patients {params.patients} '
        '--outfname {output} '
        '>& {log}'


# Filter and normalize SingleCellExperiment
rule preprocess_hgsc_sce:
    input:
        hgsc_raw='{workdir}/sce_hgsc.rds'.format(workdir=config['workdir']),
    output:
        hgsc_normalized='{workdir}/sce_hgsc_normalized.rds'.format(workdir=config['workdir']),
    params:
        name='preprocess-hgsc-sce',
        mito_thres=config['filter_settings']['mito_thres'],
        ribo_thres=config['filter_settings']['ribo_thres'],
    log:
        '{logdir}/logs/preprocess_hgsc_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/preprocess_hgsc_sce.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/preprocess_sce.R '
        '--sce {input.hgsc_raw} '
        '--mito_thres {params.mito_thres} '
        '--ribo_thres {params.ribo_thres} '
        '--outfname {output} '
        '>& {log}'

# Cell cycle assignments (TODO: Run this in multi-core mode)
rule cyclone_hgsc_sce:
    input:
        hgsc_normalized='{workdir}/sce_hgsc_normalized.rds'.format(workdir=config['workdir']),
    output:
        cc_result='{outdir}/cyclone/cc_result.rds'.format(outdir=config['outdir']),
    params:
        name='cyclone-hgsc-sce',
    log:
        '{logdir}/logs/cyclone_hgsc_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/cyclone_hgsc_sce.txt'.format(logdir=config['logdir'])
    threads: 15
    shell:
        'Rscript R/cyclone_sce.R '
        '--sce {input.hgsc_normalized} '
        '--ncpus {threads} '
        '--outfname {output} '
        '>& {log}'

# Assign cells to specific subtypes, including stromal subtypes
rule cellassign_hgsc_big:
    input:
        hgsc_normalized='{workdir}/sce_hgsc_normalized.rds'.format(workdir=config['workdir']),
        marker_list_big=config['marker_lists']['big']['path'],
    output:
        specific_assignments='{outdir}/specific_assignments.rds'.format(outdir=config['outdir']),
    params:
        name='cellassign-hgsc-big',
        include_other=config['marker_lists']['big']['include_other'],
        num_runs=config['cellassign_settings']['num_runs'],
        B=config['cellassign_settings']['B'],
        extra_opts=config['cellassign_settings']['extra_opts'],
    threads: 15
    log:
        '{logdir}/logs/cellassign_hgsc_big.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/cellassign_hgsc_big.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/cellassign_sce.R '
        '--sce {input.hgsc_normalized} '
        '--marker_list {input.marker_list_big} '
        '--include_other {params.include_other} '
        '--num_runs {params.num_runs} '
        '--rbf_pieces {params.B} '
        '{params.extra_opts} '
        '--outfname {output.specific_assignments} '
        '>& {log}'

# Annotate HGSC SCE with assignments
rule annotate_cellassign_sce:
    input:
        hgsc_normalized='{workdir}/sce_hgsc_normalized.rds'.format(workdir=config['workdir']),
        specific_assignments='{outdir}/specific_assignments.rds'.format(outdir=config['outdir']),
    output:
        hgsc_cellassign_annotated='{workdir}/sce_hgsc_celltype_annotated.rds'.format(workdir=config['workdir']),
    params:
        name='annotate-cellassign',
    log:
        '{logdir}/logs/annotate_cellassign.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/annotate_cellassign.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/annotate_cellassign.R '
        '--sce {input.hgsc_normalized} '
        '--specific {input.specific_assignments} '
        '--outfname {output.hgsc_cellassign_annotated} '
        '>& {log}'

# Annotate HGSC SCE with assignments
rule annotate_hgsc_final:
    input:
        hgsc_cellassign_annotated='{workdir}/sce_hgsc_celltype_annotated.rds'.format(workdir=config['workdir']),
        cc_result='{outdir}/cyclone/cc_result.rds'.format(outdir=config['outdir']),
    output:
        hgsc_annotated='{outdir}/sce_hgsc_annotated_final.rds'.format(outdir=config['outdir']),
    params:
        name='annotate-hgsc-final',
    log:
        '{logdir}/logs/annotate_hgsc_final.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/annotate_hgsc_final.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/annotate_hgsc_final.R '
        '--sce {input.hgsc_cellassign_annotated} '
        '--cyclone {input.cc_result} '
        '--outfname {output.hgsc_annotated} '
        '>& {log}'