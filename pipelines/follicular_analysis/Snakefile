configfile: "config/v1.yaml"

singularity: "docker://alzhang/scrna-analysis-follicular-3.5:v1.1"

rule all:
    input:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
        unsupervised_t_assignments='{outdir}/unsupervised_t_assignments.rds'.format(outdir=config['outdir']),
        #follicular_annotated='{workdir}/sce_follicular_annotated.rds'.format(workdir=config['workdir']),


# Create SingleCellExperiment
rule create_follicular_sce:
    input:
        filtered_matrices=[config['follicular_data'][x]['filtered_matrix_path'] for x in config['follicular_data']],
    output:
        '{workdir}/sce_follicular.rds'.format(workdir=config['workdir'])
    params:
        name='create-follicular-sce',
        sample_names=[config['follicular_data'][x]['dataset'] for x in config['follicular_data']],
        timepoints=[config['follicular_data'][x]['timepoint'] for x in config['follicular_data']],
        progression_statuses=[config['follicular_data'][x]['progression_status'] for x in config['follicular_data']],
        patient_progression_statuses=[config['follicular_data'][x]['patient_progression_status'] for x in config['follicular_data']],
        patients=[config['follicular_data'][x]['patient'] for x in config['follicular_data']],
    log:
        '{logdir}/logs/create_follicular_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/create_follicular_sce.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/create_sce.R '
        '--sample_names {params.sample_names} '
        '--filtered_matrices {input.filtered_matrices} '
        '--timepoints {params.timepoints} '
        '--progression {params.progression_statuses} '
        '--patient_progression {params.patient_progression_statuses} '
        '--patients {params.patients} '
        '--outfname {output} '
        '>& {log}'


# Filter and normalize SingleCellExperiment
rule preprocess_follicular_sce:
    input:
        follicular_raw='{workdir}/sce_follicular.rds'.format(workdir=config['workdir']),
    output:
        follicular_normalized='{workdir}/sce_follicular_normalized.rds'.format(workdir=config['workdir']),
    params:
        name='preprocess-follicular-sce',
        mito_thres=config['filter_settings']['mito_thres'],
        ribo_thres=config['filter_settings']['ribo_thres'],
    log:
        '{logdir}/logs/preprocess_follicular_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/preprocess_follicular_sce.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/preprocess_sce.R '
        '--sce {input.follicular_raw} '
        '--mito_thres {params.mito_thres} '
        '--ribo_thres {params.ribo_thres} '
        '--outfname {output} '
        '>& {log}'

# Cell cycle assignments (TODO: Run this in multi-core mode)
rule cyclone_follicular_sce:
    input:
        follicular_normalized='{workdir}/sce_follicular_normalized.rds'.format(workdir=config['workdir']),
    output:
        cc_result='{outdir}/cyclone/cc_result.rds'.format(outdir=config['outdir']),
    params:
        name='cyclone-follicular-sce',
    log:
        '{logdir}/logs/cyclone_follicular_sce.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/cyclone_follicular_sce.txt'.format(logdir=config['logdir'])
    threads: 15
    shell:
        'Rscript R/cyclone_sce.R '
        '--sce {input.follicular_normalized} '
        '--ncpus {threads} '
        '--outfname {output} '
        '>& {log}'

# Assign cells to B or T classes
rule cellassign_follicular_small:
    input:
        follicular_normalized='{workdir}/sce_follicular_normalized.rds'.format(workdir=config['workdir']),
        marker_list_small=config['marker_lists']['small']['path'],
    output:
        broad_assignments='{outdir}/broad_assignments.rds'.format(outdir=config['outdir']),
    params:
        name='cellassign-follicular-small',
        include_other=config['marker_lists']['small']['include_other'],
        num_runs=config['cellassign_settings']['num_runs'],
        B=config['cellassign_settings']['B'],
        extra_opts=config['cellassign_settings']['extra_opts'],
    threads: 15
    log:
        '{logdir}/logs/cellassign_follicular_small.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/cellassign_follicular_small.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/cellassign_sce.R '
        '--sce {input.follicular_normalized} '
        '--marker_list {input.marker_list_small} '
        '--include_other {params.include_other} '
        '--num_runs {params.num_runs} '
        '--rbf_pieces {params.B} '
        '{params.extra_opts} '
        '--outfname {output.broad_assignments} '
        '>& {log}'

# Assign cells to specific subtypes, including cytotoxic T
rule cellassign_follicular_big:
    input:
        follicular_normalized='{workdir}/sce_follicular_normalized.rds'.format(workdir=config['workdir']),
        marker_list_big=config['marker_lists']['big']['path'],
    output:
        specific_assignments='{outdir}/specific_assignments.rds'.format(outdir=config['outdir']),
    params:
        name='cellassign-follicular-big',
        include_other=config['marker_lists']['big']['include_other'],
        num_runs=config['cellassign_settings']['num_runs'],
        B=config['cellassign_settings']['B'],
        extra_opts=config['cellassign_settings']['extra_opts'],
    threads: 15
    log:
        '{logdir}/logs/cellassign_follicular_big.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/cellassign_follicular_big.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/cellassign_sce.R '
        '--sce {input.follicular_normalized} '
        '--marker_list {input.marker_list_big} '
        '--include_other {params.include_other} '
        '--num_runs {params.num_runs} '
        '--rbf_pieces {params.B} '
        '{params.extra_opts} '
        '--outfname {output.specific_assignments} '
        '>& {log}'


# Annotate follicular SCE with assignments
rule annotate_cellassign:
    input:
        follicular_normalized='{workdir}/sce_follicular_normalized.rds'.format(workdir=config['workdir']),
        broad_assignments='{outdir}/broad_assignments.rds'.format(outdir=config['outdir']),
        specific_assignments='{outdir}/specific_assignments.rds'.format(outdir=config['outdir']),
    output:
        follicular_cellassign_annotated='{workdir}/sce_follicular_celltype_annotated.rds'.format(workdir=config['workdir']),
    params:
        name='annotate-cellassign',
    log:
        '{logdir}/logs/annotate_cellassign.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/annotate_cellassign.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/annotate_cellassign.R '
        '--sce {input.follicular_normalized} '
        '--broad {input.broad_assignments} '
        '--specific {input.specific_assignments} '
        '--outfname {output.follicular_cellassign_annotated} '
        '>& {log}'

# Call individual B cells as malignant/nonmalignant
# NEEDS TO BE EXAMINED EVERY TIME ITS INPUTS CHANGE
rule determine_malignant_status:
    input:
        follicular_cellassign_annotated='{workdir}/sce_follicular_celltype_annotated.rds'.format(workdir=config['workdir']),
    output:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
    params:
        name='determine-malignant-status',
    log:
        '{logdir}/logs/determine_malignant_status.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/determine_malignant_status.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/determine_malignant_status.R '
        '--sce {input.follicular_cellassign_annotated} '
        '--outfname {output.follicular_malignant_annotated} '
        '>& {log}'

# Unsupervised clustering of T cells
rule follicular_unsupervised_t:
    input:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
    output:
        unsupervised_t_assignments='{outdir}/unsupervised_t_assignments.tsv'.format(outdir=config['outdir']),
    params:
        name='follicular-unsupervised-t',
        random_seed=config['cluster_random_seed'],
        cluster_methods=config['cluster_settings']['follicular_t']['methods'],
        cluster_use_method=config['cluster_settings']['follicular_t']['use_method'],
        celltypes=config['cluster_settings']['follicular_t']['celltypes'],
    log:
        '{logdir}/logs/follicular_unsupervised_t.log'.format(logdir=config['logdir'])
    benchmark:
        '{logdir}/benchmarks/follicular_unsupervised_t.txt'.format(logdir=config['logdir'])
    shell:
        'Rscript R/unsupervised_cluster_sce.R '
        '--sce {input.follicular_malignant_annotated} '
        '--celltypes {params.celltypes} '
        '--clustering_methods {params.cluster_methods} '
        '--clustering_method_use {params.cluster_use_method} '
        '--random_seed {params.random_seed} '
        '--outfname {output.unsupervised_t_assignments} '
        '>& {log}'

# Unsupervised clustering of malignant B cells
rule follicular_unsupervised_malignant:
    input:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
    output:
        unsupervised_malignant_assignments='{outdir}/unsupervised_malignant_assignments.rds'.format(outdir=config['outdir']),
    params:
        name='follicular-unsupervised-malignant',
        random_seed=config['cluster_random_seed'],
        cluster_methods=config['cluster_settings']['follicular_malignant']['methods'],
        cluster_use_method=config['cluster_settings']['follicular_malignant']['use_method'],
    shell:
        ''

# Unsupervised clustering of nonmalignant B cells
rule follicular_unsupervised_b:
    input:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
    output:
        unsupervised_b_assignments='{outdir}/unsupervised_b_assignments.rds'.format(outdir=config['outdir']),
    params:
        name='follicular-unsupervised-b',
        random_seed=config['cluster_random_seed'],
        cluster_methods=config['cluster_settings']['follicular_b']['methods'],
        cluster_use_method=config['cluster_settings']['follicular_b']['use_method'],
    shell:
        ''

# Annotate follicular SCE with assignments
rule annotate_follicular_final:
    input:
        follicular_malignant_annotated='{workdir}/sce_follicular_malignant_annotated.rds'.format(workdir=config['workdir']),
        unsupervised_t_assignments='{outdir}/unsupervised_t_assignments.rds'.format(outdir=config['outdir']),
        unsupervised_malignant_assignments='{outdir}/unsupervised_malignant_assignments.rds'.format(outdir=config['outdir']),
        unsupervised_b_assignments='{outdir}/unsupervised_b_assignments.rds'.format(outdir=config['outdir']),
        cc_result='{outdir}/cyclone/cc_result.rds'.format(outdir=config['outdir']),
    output:
        follicular_annotated='{workdir}/sce_follicular_annotated_final.rds'.format(workdir=config['workdir']),
    params:
        name='annotate-follicular-final',
    shell:
        ''

